(ert-deftest merge-analysis-ff ()
  (let (id)
    (with-temp-dir path
      (init)
      (commit-change "a" "abcdef")
      (run "git" "checkout" "-b" "newbranch")
      (commit-change "a" "ghijkl")
      (commit-change "a" "mnopqrs")
      (run "git" "checkout" "master")
      (let* ((repo (libgit-repository-open path))
             (ref (libgit-reference-dwim repo "newbranch"))
             (ann (libgit-annotated-commit-from-ref repo ref)))
        (should (equal '((normal fastforward) . nil)
                       (libgit-merge-analysis repo (list ann))))))))

(ert-deftest merge-analysis-up-to-date ()
  (let (id)
    (with-temp-dir path
      (init)
      (commit-change "a" "abcdef")
      (run "git" "checkout" "-b" "newbranch")
      (run "git" "checkout" "master")
      (let* ((repo (libgit-repository-open path))
             (ref (libgit-reference-dwim repo "newbranch"))
             (ann (libgit-annotated-commit-from-ref repo ref)))
        (should (equal '((up-to-date) . nil)
                       (libgit-merge-analysis repo (list ann))))))))

(ert-deftest merge-analysis-normal ()
  (let (id)
    (with-temp-dir path
      (init)
      (commit-change "a" "abcdef")
      (run "git" "checkout" "-b" "newbranch")
      (commit-change "a" "ghijkl")
      (run "git" "checkout" "master")
      (commit-change "a" "mnopqrs")
      (let* ((repo (libgit-repository-open path))
             (ref (libgit-reference-dwim repo "newbranch"))
             (ann (libgit-annotated-commit-from-ref repo ref)))
        (should (equal '((normal) . nil)
                       (libgit-merge-analysis repo (list ann))))))))

(ert-deftest merge-analysis-preference ()
  (let (id)
    (with-temp-dir path
      (init)
      (commit-change "a" "abcdef")
      (run "git" "checkout" "-b" "newbranch")
      (commit-change "a" "ghijkl")
      (run "git" "checkout" "master")
      (commit-change "a" "mnopqrs")
      (let* ((repo (libgit-repository-open path))
             (config (libgit-repository-config repo))
             (ref (libgit-reference-dwim repo "newbranch"))
             (ann (libgit-annotated-commit-from-ref repo ref)))
        (let ((trans (libgit-config-lock config)))
          (libgit-config-set-bool config "merge.ff" nil)
          (libgit-transaction-commit trans))
        (should (equal '((normal) . no-fastforward)
                       (libgit-merge-analysis repo (list ann))))
        (let ((trans (libgit-config-lock config)))
          (libgit-config-set-string config "merge.ff" "only")
          (libgit-transaction-commit trans))
        (should (equal '((normal) . fastforward-only)
                       (libgit-merge-analysis repo (list ann))))))))

(ert-deftest merge-base ()
  (let (id)
    (with-temp-dir path
      (init)
      (commit-change "a" "abcdef")
      (setq id (run-nnl "git" "rev-parse" "HEAD"))
      (run "git" "checkout" "-b" "newbranch")
      (commit-change "a" "ghijkl")
      (run "git" "checkout" "master")
      (commit-change "a" "mnopqrs")
      (let* ((repo (libgit-repository-open path))
             (id1 (libgit-reference-name-to-id repo "refs/heads/master"))
             (id2 (libgit-reference-name-to-id repo "refs/heads/newbranch")))
        (should (string= id (libgit-merge-base repo (list id1 id2))))))))
