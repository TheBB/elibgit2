(ert-deftest cloned-subdir ()
  (with-temp-dir (a path)
    (in-dir a (init) (commit-change "a" "abc"))
    (in-dir path
      (init)
      (run "git" "clone" a "somepath")
      (let* ((repo (libgit-repository-open path)))
        (should-error (libgit-submodule-lookup repo "somepath") :type 'giterr)))))

(ert-deftest status ()
  (with-temp-dir (a path)
    (in-dir a (init) (commit-change "a" "abc"))
    (in-dir path
      (init)
      (run "git" "submodule" "add" a "somepath")
      (let* ((repo (libgit-repository-open path)))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-index in-config in-wd index-added)))
        (commit)
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd)))
        (delete-file "somepath/a")
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-wd-modified)))
        (in-dir (concat path "somepath")
          (run "git" "reset" "--hard" "HEAD")
          (write "z" "changes"))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-untracked)))
        (in-dir (concat path "somepath")
          (add "z"))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-index-modified)))
        (in-dir (concat path "somepath")
          (set-user)
          (run "git" "checkout" "master")
          (commit))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-modified)))
        ;; TODO: Figure out how to trigger all the other possible status values
        ))))

(ert-deftest ids ()
  (let (old-id new-id)
    (with-temp-dir (a path)
      (in-dir a
        (init)
        (commit-change "a" "abc")
        (setq old-id (libgit-reference-name-to-id (libgit-repository-open a) "HEAD")))
      (in-dir path
        (init)
        (run "git" "submodule" "add" "--name" "mymodule" a "somepath")
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "mymodule")))
          (should (string= "mymodule" (libgit-submodule-name sub)))
          (should (string= "somepath" (libgit-submodule-path sub)))
          (should (path= a (libgit-submodule-url sub)))
          (should (string= old-id (libgit-submodule-index-id sub)))
          (should (string= old-id (libgit-submodule-wd-id sub)))
          (should-not (libgit-submodule-head-id sub)))
        (commit)
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "mymodule")))
          (should (string= old-id (libgit-submodule-index-id sub)))
          (should (string= old-id (libgit-submodule-wd-id sub)))
          (should (string= old-id (libgit-submodule-head-id sub))))
        (in-dir (concat path "somepath")
          (set-user)
          (run "git" "checkout" "-b" "mybranch")
          (commit-change "b" "abc")
          (setq new-id (run-nnl "git" "rev-parse" "HEAD")))
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "mymodule")))
          (should (string= old-id (libgit-submodule-index-id sub)))
          (should (string= new-id (libgit-submodule-wd-id sub)))
          (should (string= old-id (libgit-submodule-head-id sub))))
        (run "git" "add" "somepath")
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "somepath")))
          (should (string= new-id (libgit-submodule-index-id sub)))
          (should (string= new-id (libgit-submodule-wd-id sub)))
          (should (string= old-id (libgit-submodule-head-id sub))))
        (commit)
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "somepath")))
          (should (string= new-id (libgit-submodule-index-id sub)))
          (should (string= new-id (libgit-submodule-wd-id sub)))
          (should (string= new-id (libgit-submodule-head-id sub))))))))
